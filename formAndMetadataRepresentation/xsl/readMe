

Ref perso: 
- Les mieux avec livres site du zéro: 
	- POur acces rapide : http://edutechwiki.unige.ch/fr/Tutoriel_XSLT_d%C3%A9butant
	- PLus complet : http://www.liafa.univ-paris-diderot.fr/~carton/Enseignement/XML/Cours/XSLT/
- Livre site du zéro : "Structurer donnees avec xml" :
	- Partie sur xslt ( +- 30 p) en papier avec notes perso.
	- partie complémentaire sur API XPAth, en papier avec notes perso too.
- LP = Livre Patrick (O reilly). Un peu vieux mais complet.
- Tutorial video/ XQuery et dc XPath syntaxe: https://mail.google.com/mail/u/0/#inbox/146595cb23892096?projector=1
- Theorie et exemples bien faits pour associer XPath et nameSpace / xsl : http://msdn.microsoft.com/en-us/library/ms950779.aspx . Explique bien concept de name sapce.
- Comment tenir compte Name Space / X Path : http://stackoverflow.com/questions/5239685/xml-namespace-breaking-my-xpath
- Voir aussi / ça : http://www.edankert.com/defaultnamespaces.html, en bas, on explique concrètement comment relier NS/xslt.
- Syntaxe X Path avec elements les plus utilisés : http://www.w3schools.com/xpath/xpath_syntax.asp

Voir aussi notes en commentaires directement sur MetadataFormTestWithEditiXResul.html

Commencer avec ce que nous propose par défaut EditiX en enlevant fonction apply templates. Non, justement non ! CF p 169 LP


En se basant sur modèl efait par GVQ (commité sur GitHub le 2/6/14) : 
 	Si on prend ex commençant par : , on a idee de comment faire.
<xsl:template match="gvq:GVQ_Publication">
            <xsl:variable name="diReferenceTitle" select="gmd:title/gco:CharacterString" />
                    <xsl:variable name="diReferenceDOI" select="gvq:doi/gco:CharacterString" />
                            <b>Title: </b>
                                    <xsl:value-of select="$diReferenceTitle" /> ,<b>DOI: </b>
                                            <xsl:value-of select="$diReferenceDOI" />
                                                    <br />
                                                            <xsl:for-each select="gvq:onlineResource">
                                                                        <xsl:variable name="diUUID" select="gmd:CI_OnlineResource/@uuid" />

Remarques importantes :
 - Pas de template ds body.
 - Sous EditiX, on sait à quoi template s'applique en mettant souris ds les différentes zones
 - Les définitions de règles sont globales. Tous les éléments xsl:template sont enfants de l'élément racine xsl:stylesheet et la portée des règles est l'intégralité de la feuille de style. Au contraire, les éléments xsl:apply-templates et xsl:call-template ne peuvent apparaître que dans le contenu d'un élément xsl:template.
 - Pour écrire les règles et donc pouvoir mettre des éléments html (div, ...), il faut être ds le template !

 Ce que j'ai fait (ex 3):
 Au lieu de me baser sur tte une structure préfaite et d'y placer elements j'ai décidé de construire par blocs, cad par template (parce que
prb / css avec autre méthode et en plus c'est plus clair de travailler avec des blocs). Mon prb a été de mettre dans l'ordre souhaité mes parties parce que si j'instancie dans le body un <xsl:apply-templates/> pour y placer d'autre template avec match attribute, me place les infos das l'odre xml dc pas bon.
J'ai donc suivi méthode tuto site du zéro en utilisant call-template en définissant les valeurs dans le body et en les récupérant dans les différents temnplate appelés en dehors du body. Note : pour avoir résulter il fauit bien sur passer par value of !
	Attention néanmoins : le call template n'est parfois pas nécessaire, un simple value off intégré dans le template ds le body suffit. Le call tempate complique en particulier le for each.


